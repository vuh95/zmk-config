/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp SPACE>, <&kp RET>;
        };
    };
    
    behaviors {
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp SPACE>, <&kp TAB>, <&kp RET>;
        };
    };
    
    behaviors {
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LC(C)>, <&kp LC(V)>, <&kp LC(X)>;
        };
    };
    
    behaviors {
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp F>, <&kp LC(C)>;
        };
    };
    
    behaviors {
        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp G>, <&kp LC(V)>;
        };
    };
    
    behaviors {
        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp SQT>, <&kp EQUAL>;
        };
    };
    
    keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  \  | DEL  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB    &kp Q  &kp W  &kp E &kp R &kp T           &kp Y  &kp U   &kp I      &kp O   &kp P     &kp BSPC
   &kp LCTRL  &kp A  &kp S  &kp D &td3  &td4            &kp H  &kp J   &kp K      &kp L   &kp SEMI  &td5
   &sk LSHFT  &kp Z  &kp X  &kp C &kp V &kp B           &kp N  &kp M   &kp COMMA  &kp DOT &kp BSLH  &kp DEL
                        &kp LGUI  &mo 1  &td1           &td0   &mo 2   &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  7  |  8  |  9  |  +  |  -  | BKSP |
// | CTRL |     |     |     | td2 |     |   |  4  |  5  |  6  |  *  |  /  |  =   |
// | SHFT |     |     |     |     |     |   |  1  |  2  |  3  |  [  |  ]  | ESC  |
//                    | GUI |     | SPC |   | ENT |     |  0  |
                        bindings = <
   &kp TAB    &kp LS(HOME)  &kp LS(UP)    &kp LS(END)    &kp N4     &kp N5         &kp N7    &kp N8    &kp N9     &kp PLUS    &kp MINUS   &kp BSPC
   &kp LCTRL  &kp LS(LEFT)  &kp LC(A)     &kp LS(RIGHT)  &kp LC(V)  &trans         &kp N4    &kp N5    &kp N6     &kp ASTRK   &kp SLASH   &kp EQUAL
   &kp LSHFT  &kp LS(PG_UP) &kp LS(DOWN)  &kp LS(PG_DN)  &trans     &trans         &kp N1    &kp N2    &kp N3     &kp LBKT    &kp RBKT    &kp ESC
                                            &kp LGUI    &trans      &td1           &td0   &lt 3 DOT    &kp N0
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |PG_UP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |PG_DN |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB    &kp HOME   &kp UP     &kp END     &kp DLLR   &kp PRCNT     &kp CARET   &kp AMPS    &kp KP_MULTIPLY  &kp LPAR   &kp RPAR   &kp PG_UP
   &kp LCTRL   &kp LEFT   &kp DOWN   &kp RIGHT   &trans     &td2          &kp MINUS   &kp EQUAL   &kp LBKT         &kp RBKT   &kp BSLH   &kp PG_DN
   &kp LSHFT   &trans     &trans     &trans      &trans     &trans        &kp UNDER   &kp PLUS    &kp LBRC         &kp RBRC   &kp PIPE   &kp TILDE
                    	                  &kp LGUI   &mo 3  &kp SPACE     &kp RET     &trans      &kp RALT
                        >;
                };
                
                adjust_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5        &kp N6          &kp N7           &kp N8  &kp N9  &kp N0  &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &out OUT_TOG  &rgb_ug RGB_BRI &rgb_ug RGB_EFF  &trans  &trans  &trans  &trans
   &reset     &bootloader  &trans       &trans       &trans       &trans        &rgb_ug RGB_BRD &rgb_ug RGB_EFR  &trans  &trans  &trans  &trans
                                          &trans     &trans  &ext_power EP_TOG  &rgb_ug RGB_TOG  &trans  &trans
                        >;
                };

        };
};
